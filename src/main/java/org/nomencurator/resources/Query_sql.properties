# Nomencurator MkIVb schema for PostgreSQL
# Copyright (c) 2003, 2004, 2005 Nozomi `James' Ytow
# All rights reserved.
#----------------------------------------------------------------------------
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions, and the following disclaimer,
#    without modification, immediately at the beginning of the file.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
# 
# Where this Software is combined with software released under the terms of 
# either the GNU Public License ("GPL") or the Mozilla Public Licence ("MPL"),
# and the terms of the GPL/MPL would require the combined work to also be 
# released under the terms of the GPL/MPL, the terms and conditions of this
# License will apply in addition to those of the GPL/MPL with the exception
# of any terms or conditions of this License that conflict with, or are 
# expressly prohibited by, the GPL/MPL.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# SQL statement to create table_types table
CREATE_TABLE_TYPES=CREATE TABLE table_types (\
	table_type INTEGER PRIMARY KEY,\
	type_name {0}\
);

# parameter for the CREATE_TABLE_TYPES resource
PARAM_TABLE_TYPES=VCHAR(255)

# SQL statement to create tables table
CREATE_TABLES=CREATE TABLE tables (\
	table_name {0} PRIMARY KEY,\
	table_type INTEGER \
	CONSTRAINT tables_tableType REFERENCES table_types(table_type)\
);

# parameters for CREATE_TABLES resource 
PARAM_TABLES=VCHAR(255)

# SQL satement to create locales table
CREATE_LOCALES=CREATE TABLE locales (\
	locale {0} PRIMARY KEY,\
	language {1},\
	region {2},\
	variant {3},\
	language_iso2 CHAR(2),\
	region_iso2 CHAR(2),\
	variant_2 CHAR(2),\
	language_iso3 CHAR(3),\
	region_iso3 CHAR(3)\

);

# parameters for CREATE_LOCALES resource
PARAM_LOCALES=VCHAR(255) VCHAR(255) VCHAR(255) VCHAR(255)

# SQL statement to create table_explanations table
CREATE_TABLE_EXPLANATIONS=CREATE TABLE table_explanations (\
	table_name {0} \
	CONSTRAINT TableExplanations_tableName REFERENCES tables(table_name), \
	field_name {1}, \
	locale {2} \
	CONSTRAINT TableExplanations_locale REFERENCES locales(locale), \
	explanation {3}, \
	PRIMARY KEY (table_name, field_name, locale)\
);

# parameters for CREATE_TABLE_EXPLANATIONS resource
PARAM_TABLE_EXPLANATIONS=VCHAR(255) VCHAR(255) VCHAR(255) NVARHCAR(2048)

# SQL statement to create copyright table
CREATE_COPYRIGHTS=CREATE TABLE copyrights ( \
	acronym	{0} PRIMARY KEY, \
	copyright_name {1}, \
	URL {2}, \
	copyright {3}, \
	notes {4} \
);

# parameters for CREATE_COPYRIGHT resource
PARAM_COPYRIGHTS=NVARCHAR(255) NVARCHAR(255) VCHAR(2048) NVARCHAR(255) NVARCHAR(2048)


# SQL statement to create contributor table
CREATE_CONTRIBUTORS=CREATE TABLE contributors ( \
	contributor {0} PRIMARY KEY, \
	copyright {1} \
	CONSTRAINT contributor_copyright REFERENCES copyrights(acronym), \
	person INTEGER \
) {2} {3};

# parameters for CREATE_CONTRIBUTORS resource
PARAM_CONTRIBUTORS=NVARCHAR(255) NVARCHAR(255)

# SQL statement to create object_types table
CREATE_OBJECT_TYPES=CREATE TABLE object_types ( \
	object_type {0} PRIMARY KEY, \
	table_name {1} \
);

# parameters for CREATE_COBJECT_TYPES resource
PARAM_OBJECT_TYPES=VCHAR(255) VCHAR(255)

# SQL statement to create named_object table
CREATE_NAMED_OBJECTS=CREATE TABLE named_objects ( \
	object_id INTEGER PRIMARY KEY CHECK (object_id <> 0), \
	object_type {0} \
	CONSTRAINT named_object_object_type REFERENCES tables(table_name), \
	persistent_id {1}, \
	source INTEGER \
	CONSTRAINT named_object_source REFERENCES named_objects(object_id), \
	contributor {2} \
	CONSTRAINT named_object_contributor REFERENCES contributor(contributor), \
	editable INTEGER CHECK(editable IN (0, 1)), \
	copyright {3} \
	CONSTRAINT named_object_copyright REFERENCES copyright(acronym), \
	verbatim {4}, \
	scope {5}, \
	notes {6}, \
	last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \
	expire TIMESTAMP
) {7} {8};

# parameters for CREATE_NAMED_OBJECT resource
PARAM_NAMED_OBJECTS=VCHAR(255) VCHAR(2048) VCHAR(255) VCHAR(255) VCHAR(4096) VCHAR(255) VCHAR(4096)

# SQL statement to create parsed_object table
CREATE_PARSED_OBJECTS=CREATE TABLE parsed_objects ( \
	parsed_object INTEGER \
	CONSTRAINT Parsed_object_parsed_object REFERENCES named_object(object_id), \
	source_object INTEGER \
	CONSTRAINT Parsed_object_source_object REFERENCES named_object(object_id), \
	note {0}, \
	PRIMARY KEY (parsed_object, source_object)\
) {1} {2};

# parameters for CREATE_PARSED_OBJECT resource
PARAM_PARSED_OBJECTS=VCHAR(4096)

# SQL statement to create author table
CREATE_PEOPLE=CREATE TABLE people ( \
	object_id INTEGER PRIMARY KEY \
	CONSTRAINT Author_object_id REFERENCES named_object(object_id), \
	name_literal {0}, \
	surname_prefix {1}, \
	surname {2}, \
	surname_epithet {3}, \
	first_name {4}, \
	middle_names {5}, \
	title {6}, \
	birth DATE, \
	death DATE, \
	address {7} \
) {8} {9}; \
ALTER TABLE contributor ADD CONSTRAINT contributor_author FOREIGN KEY (author) REFERENCES author(object_id) DEFERRABLE INITIALLY  DEFERRED;

# parameters for CREATE_AUTHOR resource
PARAM_PEOPLE=VCHAR(512) VCHAR(32) VCHAR(255) VCHAR(32) VCHAR(255) VCHAR(255) VCHAR(32) VCHAR(4096)  

# SQL statement to create pseudonym table
CREATE_PSEUDONYM=CREATE TABLE pseudonym ( \
	named_object INTEGER \
	CONSTRAINT pseudonym_object REFERENCES named_objects(object_id), \
	literal {0}, \
	PRIMARY KEY (named_object, literal) \
);

PARAM_PSEUDONYM=NVARCHAR(20)

# SQL statement to create institution table
CREATE_INSTITUTIONS=CREATE TABLE institutions ( \
	ID INTEGER PRIMARY KEY, \
	name {0}, \
	address	{1}, \
	date_from DATE, \
	date_to DATE, \
	division_of INTEGER \
	CONSTRAINT institution_division_of REFERENCES institution(ID), \
	notes {2} \
) {3} {4};

# parameters for CREATE_INSTITUTION resource
PARAM_INSTITUTIONS=NVARCHAR(255) NVARCHAR(255) NVARCHAR(255)

# SQL statement to create institution_codes table
CREATE_INSTITUTION_CODES=CREATE TABLE institution_codes ( \
	institution INTEGER \
	CONSTRAINT institution_code REFERENCES institutions(id),
	code {0}, \
	scope {1}, \
	note {2}, \
	PRIMARY KEY (institution, code)
) {3} {4};

# parameters for CREATE_INSTITUTION_CODES resource
PARAM_INSTITUTION_CODES=NVARCHAR(255) NVARCHAR(255) NVARCHAR(4096)

# SQL statement to create institution_history table
CREATE_INSTITUTION_HISTORY=CREATE TABLE institution_history ( \
	previous INTEGER \
	CONSTRAINT institution_history_previous REFERENCES institution(ID) \, 
	next INTEGER \
	CONSTRAINT institution_history_next REFERENCES institution(ID), \
	PRIMARY KEY (previous, next) \
) {0} {1};

# parameters of CREATE_INSTITUTION_HISTORY resource
PARAM_INSTITUTION_HISTORY=

# SQL statement to create affiliations table
CREATE_AFFILIATIONS=CREATE TABLE affiliations ( \
	person	INTEGER \
	CONSTRAINT affiliation_person REFERENCES people(object_id), \
	institute INTEGER \
	CONSTRAINT affiliation_institute REFERENCES institution(ID), \
	date_from DATE, \
	date_to DATE, \
	notes {0}, \
	PRIMARY KEY (author, institute, date_from, date_to) \
) {1} {2};

# parameters of CREATE_AFFLIATION resource
PARAM_AFFILIATIONS=NVARCHAR(4096)

# SQL statement to create publication_type table
CREATE_PUBLICATION_TYPES=CREATE TABLE publication_types ( \
	ID INTEGER PRIMARY KEY, \
	name {0}, \
	format {1} \
);

# parameters of CREATE_PUBLICATION_TYPE resource
PARAM_PUBLICATION_TYPES=NVARCHAR(50) NVARCHAR(20)

# SQL statement to create publication_fields table
CREATE_PUBLICATION_FIELDS=CREATE TABLE publication_fields ( \
	format {0}, \
	field_name {1}, \
	locale {2}, \
	CONSTRAINT publication_fields_locale REFERENCES locales(locale), \
	display_name {3} \
	PRIMARY KEY (format, field_name, locale) \
);

# parameters of CREATE_PUBLICATION_FIELDS resource
PARAM_PUBLICATION_FIELD=VCHAR(50) NVARCHAR(255) VCHAR(255) NVARCHAR(255)

# SQL statement to create publication table
CREATE_PUBLICATIONS=CREATE TABLE publications ( \
	object_id INTEGER PRIMARY KEY \
	CONSTRAINT publication_object_id REFERENCES named_object(object_id), \
	publication_type INTEGER \
	CONSTRAINT publication_publication_type REFERENCES publication_type(ID), \
	authors	{0}, \
	affiliations {1}, \
	doi {2}, \
	isxn {3}, \
	citationTitle {4}, \
	contentsTitle {5}, \
	year {6}, \
	volume {7}, \
	issue {8}, \
	first_page {9}, \
	last_page {10}, \
	publisher {11}, \
	place {12}, \
	received DATE, \
	reviced	DATE, \
	accepted DATE, \
	published DATE, \
	part_of INTEGER \
	CONSTRAINT publication_part_of REFERENCES publication(object_id), \
	pages {13}
) {14} {15};

# parameters of CREATE_PUBLICATION resource
PARAM_PUBLICATIONS=NVARCHAR(255) NVARCHAR(255) NVARCHAR(50) NVARCHAR(14) NVARCHAR(255) NVARCHAR(255) NVARCHAR(4) NVARCHAR(10) NVARCHAR(10) NVARCHAR(10) NVARCHAR(10) NVARCHAR(255) NVARCHAR(255) NVARCHAR(255)

# SQL statement to create isxn table
CREATE_ISXN=CREATE TABLE isxn ( \
	publication INTEGER \
	CONSTRAINT isxn_publication REFERENCES publications(object_id), \
	isxn {0}, \
	isxn_type {1} \
	CONSTRAINT isxn_isxnType CHECK(isxnType IN ('ISBN', 'ISSN')), \
	PRIMARY KEY (publication, isxn, isxnType) \
) {2} {3};

# parameters of CREATE_ISXN resource
PARAM_ISXN=CHAR(13) CHAR(4)

# SQL statement to create shelfmark table
CREATE_SHELFMARKS=CREATE TABLE shelfmarks ( \
	publication INTEGER \
	CONSTRAINT shelfmark_publication REFERENCES publication(object_id), \
	last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \
	contributor {0} \
	CONSTRAINT shelfmark_contributor REFERENCES contributors(contributor), \
	library	INTEGER \
	CONSTRAINT shelfmark_library REFERENCES institutions(ID), \
	shelfmark {1}, \
	PRIMARY KEY(publication, contributor, library, shelfmark) \
) {2} {3};

# parameters of CREATE_SHELFMARK resource
PARAM_SHELFMARKS=NVARCHAR(255) NBARCHAR(255)

# SQL statement to create authorship table
CREATE_AUTHORSHIP=CREATE TABLE authorship ( \
	publication INTEGER \
	CONSTRAINT authorship_publication REFERENCES publications(object_id), \
	author	INTEGER \
	CONSTRAINT author authorship_author REFERENCES people(object_id), \
	sequence INTEGER, \
	CHECK (sequence >= 0), \
	PRIMARY KEY (author, publication, sequence) \
) {0} {1};

# parameters of  resource CREATE_AUTHORSHIP
PARAM_AUTHORSHIP=

# SQL statement to create citations table
CREATE_CITATIONS=CREATE TABLE citations ( \
	referer INTEGER \
	CONSTRAINT citation_referer REFERENCES publications(object_id), \
	referant INTEGER \
	CONSTRAINT citation_referant REFERENCES publications(object_id), \
	sequence INTEGER \
	CHECK (sequence >= 0), \
	PRIMARY KEY (referer, referant) \
) {0} {1} ;

# parameters of  resource CREATE_CITATIONS
PARAM_CITATIONS=

# SQL statement to create appearances table
CREATE_APPEARANCES=CREATE TABLE appearances ( \
	object_id INTEGER PRIMARY KEY \
	CONSTRAINT appearance_object_id REFERENCES named_objects(object_id), \
	pages {0},\
	lines {1}, \
	figures {2}, \
	tables {3}, \
	appearance {4} \
) {5} {6} ;

# parameters of CREATE_APPEARANCES resource
PARAM_APPEARANCES=NVARCHAR(255) NVARCHAR(255) NVARCHAR(255) NVARCHAR(255) NVARCHAR(4096)

CREATE_CODES=CREATE TABLE codes ( \
	id INTEGER UNIQUE, \
	locale {0} PRIMARY KEY, \
	acronym {1}, \
	name {2} \
);

PARAM_CODES=CHAR(255) CHAR(255) CHAR(2048)

CREATE_NAMING_CONVENTIONS=CREATE TABLE naming_conventions ( \
	id INTEGER PRIMARY KEY, \
	name {0} \
);

PARAM_NAMING_CONVENTIONS=CHAR(255)

# SQL statement to create ranks table
CREATE_RANKS=CREATE TABLE ranks ( \
	id INTEGER PRIMARY KEY, \
	name {0}, \
	abbreviation {1}, \
	higher INTEGER, \
	lower INTEGER, \
	equivalent INTEGER, \
	CHECK (higher <> ID AND lower <> ID AND equivalent <> ID AND higher <> lower AND lower <> equivalent AND equivalent <> higher), \
	optional INTEGER, \
	code_coverage INTEGER, \
	naming_convetion INTEGER \
);

# parameters of CREATE_RANK resource
PARAM_RANKS=CHAR(32) CHAR(32)

# SQL statement to create rank_names table
CREATE_RANK_NAMES=CREATE TABLE rank_names ( \
	rank INTEGER \
	CONSTRAINT rank_names_rank REFERENCES rank(ID), \
	locale {0} \
	CONSTRAINT locales_locale REFERENCES Locales(locale), \
	rank_name {1}, \
	PRIMARY KEY(rank, locale, rank_name) \
);

# parameters of CREATE_RANK_NAMES resource
PARAM_RANK_NAMES=CHAR(255) NVARCHAR(255)

# SQL statement to create name_endings table
CREATE_NAME_ENDINGS=CREATE TABLE name_endings ( \
	rank INTEGER \
	CONSTRAINT nameEnding_rank REFERENCES rank(ID), \
	naming_convention INTEGER \
	CONSTRAINT nameEnding_naming_convention REFERENCES naming_convention(ID), \
	ending {0} \
);

# parameters of CREATE_NAME_ENDINGS resource
PARAM_NAME_ENDINGS=VCHAR(20)

# SQL statement to create name_usages table
CREATE_NAME_USAGES=CREATE TABLE name_usages ( \
	object_id INTEGER PRIMARY KEY \
	CONSTRAINT nameusage_object_id REFERENCES named_object(object_id), \
	locale {0} \
	CONSTRAINT nameusage_locale REFERENCES Locales(locale), \
	rank INTEGER \
	CONSTRAINT nameusage_rank REFERENCES rank(ID), \
	literal {1}, \
	appearance INTEGER \
	CONSTRAINT nameusage_appearance REFERENCES appearance(object_id), \
	sensu INTEGER \
	CONSTRAINT nameusage_sensu REFERENCES nameusage(object_id), \
	higher_taxon INTEGER \
	CONSTRAINT nameusage_higher_taxon REFERENCES nameusage(object_id), \
	sequence INTEGER, \
	CHECK (sequence >= 0), \
	type INTEGER, \
	CHECK (type IN (0, 1)), \
	type_of_type {2}, \
	incertae_sedis INTEGER, \
	CHECK (incertae_sedis IN (0, 1)) \
	authority {3}, \
) {4} {5};

# parameters of CREATE_NAME_USAGES resource
PARAM_NAME_USAGES=VCHAR(20) NVARCHAR(255) NVARCHAR(20) NVARCHAR(255)

# SQL statement to create linkage_types table
CREATE_LINKAGE_TYPEs=CREATE TABLE linkage_types ( \
	id INTEGER, \
	linkage_type {0} PRIMARY KEY, \
	linker_cardinarity {1}, \
	linked_cardinarity {2}, \
	explanation {3} \
);

# parameters of CREATE_LINKAGE_TYPES resource
PARAM_LINKAGE_TYPES=NVARCHAR(10) CHAR(1) CHAR(1) NVARCHAR(2048)

# SQL statement to create linkage_groups table
CREATE_LINKAGE_GROUPS=CREATE TABLE linkage_groups ( \
	object_id INTEGER PRIMARY KEY \
	CONSTRAINT linkage_group_object_id REFERENCES named_objects(object_id), \
	linkage_type {0} \
	CONSTRAINT linage_group_link_type REFERENCES linkage_types(link_type), \
	appearance INTEGER \
	explicit INTEGER, \
	CHECK (explicit IN (0, 1)), \
	path INTEGER \
) {1} {2};

# parameters of CREATE_LINKAGE_GROUPS resource
PARAM_LINKAGE_GROUPS=NVARCHAR(20)

# SQL statement to create linkages table
CREATE_LINKAGES=CREATE TABLE linkages ( \
	linkage_group INTEGER \
	CONSTRAINT linkages_linkage_gorups REFERENCES linkage_groups(object_id), \
	name_usage INTEGER \
	CONSTRAINT linkages_name_usage REFERENCES name_usages(object_id), \
	sequence INTEGER, \
	CHECK (sequence >= 0), \
	is_link_maker INTEGER, \
	CHECK (is_link_maker IN (0, 1)), \
	PRIMARY KEY (linkage_group, name_usage) \
) {0} {1};

# parameters of CREATE_LINKAGES resource
PARAM_LINKAGES=

# SQL statement to create nameusage_nodes table
CREATE_NAMEUSAGE_NODES=CREATE TABLE nameusage_nodes ( \
	name_usage INTEGER \
	CONSTRAINT nameusage_nodes_nameusage REFERENCES name_usages(object_id), \
	relevant INTEGER \
	CONSTRAINT nameusage_nodes_relevant REFERENCES name_usages(object_id), \
	is_referred INTEGER, \
	CHECK (is_referred IN (0, 1)), \
	PRIMARY KEY (nameusage, relevant, is_referred) \
) {0} {1} ;

# parameters of CREATE_NAMEUSAGE_NODES resource
PARAM_NAMEUSAGE_NODES=

# SQL statement to create name_tokens table
CREATE_NAME_TOKENS=CREATE TABLE name_tokens ( \
	id INTEGER, \
	locale {0}, \
	literal {1}, \
	authority INTEGER \
	CONSTRAINT name_token_authority REFERENCES name_usages(object_id), \
	authority_literal {2}, \
	PRIMARY KEY (literal, authority) \
) {3} {4} ;

# parameters of CREATE_NAME_TOKENS resource
PARAM_NAME_TOKENS=VCHAR(255) NVARCHAR(255) NVARCHAR(255)

CREATE_TOKEN_NAMEUSAGE=CREATE TABLE token_nameusage ( \
	name_usage INTEGER, \
	CONSTRAINT token_name_usage REFERENCES name_usages(object_id), \
	token INTEGER, \
	CONSTRAINT token_index REFERENCES name_tokenss(id), \
	sequence INTEGER, \
	CHECK (sequence >= 0), \
	is_terminal INTEGER, \
	CHECK (incertae_sedis IN (0, 1)), \
	basionym_authority {0} \
) {1} {2};

PARAM_TOKEN_NAMEUSAGE=NVARCHAR(255)

CREATE_EVALUATIONS=CREATE TABLE evaluations ( \
	table_name {0}, \
	field {1}, \
	evaluator {2}, \
	evaluation {3}, \
	note {4}, \
	last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \
	PRIMARY KEY (table_name, field, evaluator, last_updated) \
);

PARAM_EVALUATIONS=VCHAR(255) VCHAR(255) NVARCHAR(255)  NVARCHAR(255)  NVARCHAR(4096)

# SQL statement to create object_id_pool table
CREATE_OBJECT_ID_POOL=CREATE TABLE object_id_pool ( \
	object_id INTEGER PRIMARY KEY \
);

# parameters of CREATE_OBJECT_ID_POOL resource
PARAM_OBJECT_ID_POOL=

# stored procedure to get the next object ID
GET_NEXT_OBJECT_ID_PROCEDURE=get_next_object_id()

GET_NEXT_OBJECT_ID_0=SELECT COUNT(object_id) FROM {0};
GET_NEXT_OBJECT_ID_1=SELECT MIN(object_id) FROM {0};
GET_NEXT_OBJECT_ID_2=SELECT COUNT(object_id) FROM {0} WHERE object_id > 0;
GET_NEXT_OBJECT_ID_3=SELECT MIN(object_id) FROM {0} WHERE object_id > 0;
GET_NEXT_OBJECT_ID_4=SELECT COUNT(object_id) FROM {0};
GET_NEXT_OBJECT_ID_5=SELECT MAX(object_id) FROM {0};
GET_NEXT_OBJECT_ID_6=SELECT COUNT(object_id) FROM {0} WHERE object_id < 0;
GET_NEXT_OBJECT_ID_7=SELECT MAX(object_id) FROM {0} WHERE object_id < 0;

# SQL statemet to select a subclass of NamedObject 
SELECT_ALL_NAMED_OBJECTS_OF_TYPE=SELECT * FROM {0} JOIN {1} ON {0}.object_id = {1}.object_id;

# SQL statemet to select a NamedObject by object ID
SELECT_NAMED_OBJECT_BY_OID=SELECT * FROM {0} JOIN {1} ON {0}.object_id = {1}.object_id  WHERE {0}.object_id = ?;

# SQL statemet to select a NamedObject by persistent ID
SELECT_NAMED_OBJECT_BY_PID=SELECT * FROM {0} JOIN {1} ON {0}.object_id = {1}.object_id WHERE {0}.persistent_id = ?;

# SQL statemet to select a NamedObject by persistent ID with fluctuation
SELECT_NAMED_OBJECT_LIKE_PID=SELECT * FROM {0} JOIN {1} ON {0}.object_id = {1}.object_id WHERE {0}.persistent_id LIKE ?;

# SQL statemet to select a object ID by persistent ID
SELECT_OID_BY_PID=SELECT object_id FROM {0} WHERE {0}.persistent_id = ?;

# SQL statemet to select a persistent ID by object ID
SELECT_PID_BY_OID=SELECT persistent_id FROM {0} WHERE {0}.object_id = ?;

# SQL statemet to select object type by object ID
SELECT_TYPE_BY_OID=SELECT object_type FROM {0} WHERE {0}.object_id = ?;

# SQL statemet to select object type by persistent ID
SELECT_TYPE_BY_PID=SELECT object_type FROM {0} WHERE {0}.persistent_id = ?;

# SQL statemet to select lower taxa by object ID of the higher taxon
SELECT_LOWER_TAXA_BY_OID=SELECT * FROM {0} JOIN {1} ON {0}.object_id = {1}.object_id  WHERE {1}.higher_taxon = ?;

# SQL statemet to select lower taxa by object ID of the higher taxon
SELECT_LOWER_TAXA_OID_BY_OID=SELECT object_id, index FROM {0} WHERE {1}.higher_taxon = ?;

# SQL statemet to select lower taxa by object ID of the higher taxon
COUNT_LOWER_TAXA_OF_OID=SELECT count(object_id) FROM {0} WHERE {1}.higher_taxon = ?;

# SQL statemet to select lower taxa by object ID of the higher taxon
SELECT_LOWER_TAXA_PID_BY_OID=SELECT persistent_id, index FROM {0} JOIN {1} ON {0}.object_id = {1}.object_id  WHERE {1}.higher_taxon = ?;

# SQL statemet to select a locale
SELECT_LCALE=SLECT * FROM {0} WHERE locale = ?;	

# SQL statemet to select a table as whole
SELECT_TABLE=SLECT * FROM {0};

# SQL statemet to set status of a transaction
SET_TRANSACTION=SET TRANSACTION;

# SQL statemet to start a transaction
START_TRANSACTION=BEGIN TRANSACTION;

# SQL statemet to commit a transaction
COMMIT_TRANSACTION=COMMIT WORK;

# SQL statemet to rollback a transaction
ROLLBACK_TRANSACTION=ROLLBACK WORK;

# SQL statemet to set savepoint of a transaction
TRANSACTION_SAVEPOINT=SAVEPOINT;

# SQL statemet to insert a NamedObject
INSERT_NAMED_OBJECT=INSERT INTO ? VALUES_NAMED_OBJECT";

# SQL statemet to insert a NamedObject
INSERT_NAMED_OBJECT_PROCEDURE=insert_named_object (?, ?, ?, ?, ?, ?)

# SQL statemet to delete an OID in pool
DELETE_OID_IN_POOL="DELETE_OID_IN_POOL";
	

# table name for NamedObject
TABLE_NAMED_OBJECT=named_object

# table name for pooled object ID
TABLE_OID_POOL=object_id_pool

# table name for Author
Author=author

# table name for Publication
Publication=publication

# table name for Appearance
Appearance=appearance

# table name for NameUsage
NameUsage=nameusage

# table name for Annotation
Annotation=annotation

# table name for NameUsageNode
NameUsageNode=nameusage_nodes

# table name for Locale
TABLE_LOCALE=locale

# table name for Rank
TABLE_RANK=rank

DELETE_OID_IN_POOL=DELETE FROM {0} WHERE object_id = ?;

INSERT_NAMED_OBJECT=INSERT INTO {0} VALUES (?, ?, ?, ?, ?, ?, ?); INSERT INTO {1} VALUES(?);

SET_NAMED_OBJECT=UPDATE {0} SET object_type = ?, persistent_id = ?, contributor = ?, editable = ?, coyright = ?, notes = ? lastUpdate = CURRENT_TIMESTAMP WHERE object_id = ?;

SET_Author=UPDATE {0} SET surname_prefix = ?, surname = ?, surname_epithet = ?, first_name  = ?, middle_names = ?, title = ?, birth = ?, death = ? WHERE object_id = ?;

SET_Publication=UPDATE {0} SET publication_type = ?, authors = ?, affiliations = ?, doi = ?, isxn = ?, citationTitle = ?, contentsTitle = ?, year = ?, volume = ?, issue = ?, first_page = ?, last_page = ?, publisher = ?, place = ?, received = ?, revised = ?, accepted = ?, part_of = ? WHERE object_id = ?;

SET_Appearance=UPDATE {0} SET publication = ?, page ?, lines = ?, appearance = ? WHERE object_id = ?;

SET_NameUsage=UPDATE {0} SET locale = ?, rank = ?, literal = ?, appearance = ?, sensu = ?, higher_taxon = ?, sequence = ?, type = ?, type_of_type = ?, incertae_sedis = ? WHERE object_id = ?;

SET_Annotation=UPDATE {0} SET link_type = ?, appearance = ?, explicit = ?, path = ? WHERE object_id = ?;

